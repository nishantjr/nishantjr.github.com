#!/bin/bash
#
#  git-commit-filetree - commit an arbitrary tree of files
#                        to a branch in a git repository.
#
#  Version:  cjsnjr.2019-03-28.0
#
#  Please find the latest version of this (with tests and copying rights) at:
#    https://github.com/cynic-net/git-commit-filetree
#
#  Authors:
#    Curt J. Sampson <cjs@cynic.net>
#    Nishant Rodrigues <nishantjr@gmail.com>
#

set -e -o pipefail

SUBDIRECTORY_OK=1
. "$(git --exec-path)/git-sh-setup"

index_file=$(mktemp)
internal_error=true
trap 'rm -f $index_file; $internal_error && err 255 "INTERNAL ERROR. FAILED!"' 0

err() {
    local exitcode="$1"; shift
    internal_error=false
    echo 1>&2 "$@"
    exit $exitcode
}

fast_forward_to_tracking() {
    declare -g branch ref tracking
    #   Local ahead of tracking; carry on.
    git merge-base --is-ancestor "$tracking" "$ref" && return 0
    #   Local can fast-foward to tracking; do it.
    git merge-base --is-ancestor "$ref" "$tracking" && {
        #   Remember, update-ref takes only a full ref name; giving it
        #   `abranch` will create or update that name at the top of the
        #   "refs tree," not `refs/heads/abranch`. To help catch this kind
        #   of error, we give the third argument that must be the current
        #   value where short names such as `abranch` are expanded to
        #   `refs/heads/abranch`.
        git update-ref "$ref" "$tracking" "$branch" \
            -m 'commit-filetree: fast-forward'
        return 0
    }
    #   Otherwise the user must deal with the divergence.
    err 3 "Branch $branch has diverged from tracking $tracking." \
        $'\n''You must fix this manually before using git-commit-filetree.'
        #   We should probably extend this explanation with suggestions
        #   on how to fix the problem.
}

branch="$1"; shift || true
path="$1"; shift || true
[ -z "$path" -o -n "$1" ] \
    && err 129 "Usage: git commit-filetree <branch> <path>"

# Check that we have no uncommited or unknown files.
git diff-index --quiet HEAD \
    || err  1 "Cannot commit with uncommited files in working copy."
[ -z "$(git ls-files --exclude-standard --others)" ] \
    || err  1 "Cannot commit with untracked files in working copy."

ref=refs/heads/$(echo $branch | sed -e 's,^refs/heads/,,')
git show-ref -q --verify $ref || err 128 "Invalid ref: $ref"

#   Find and fast-forward the tracking ref, if we have one
tracking=$(git rev-parse --symbolic-full-name "$branch@{u}" 2>/dev/null || true)
[[ $tracking ]] && fast_forward_to_tracking

source_sha=$(git show --quiet --pretty='format:%h')

# Switch to an index separate from repo working copy.
export GIT_INDEX_FILE=$index_file

git read-tree --empty
git --work-tree="$path" add -A
tree_sha=$(git write-tree)
parent_tree_sha=$(git log -1 $ref --format='%T')
[ "$tree_sha" = "$parent_tree_sha" ] && { internal_error=false; exit 0; }

commit_msg="Build from source commit $source_sha."
commit_sha=$(echo "$commit_msg" | git commit-tree $tree_sha -p $ref)

git update-ref $ref $commit_sha \
    -m "commit-filetree: $commit_msg"

internal_error=false
